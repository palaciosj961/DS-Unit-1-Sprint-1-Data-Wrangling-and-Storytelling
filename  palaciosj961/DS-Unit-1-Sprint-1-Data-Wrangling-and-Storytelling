{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of LS_DS_111_Exploratory_Data_Analysis_Assignment.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/palaciosj961/DS-Unit-1-Sprint-1-Data-Wrangling-and-Storytelling/blob/master/%20palaciosj961/DS-Unit-1-Sprint-1-Data-Wrangling-and-Storytelling\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "MSnsTgZLKO72"
      },
      "source": [
        "# Practice Loading and Exploring Datasets\n",
        "\n",
        "This assignment is purposely open-ended. You will be asked to load datasets from the [UC-Irvine Machine Learning Repository](https://archive.ics.uci.edu/ml/index.php). \n",
        "\n",
        "Even though you maybe using different datasets than your fellow classmates, try and be supportive and assist each other in the challenges that you are facing. You will only deepend your understanding of these topics as you work to assist one another. Many popular UCI datasets face similar data loading challenges.\n",
        "\n",
        "Remember that the UCI datasets do not necessarily have a file type of `.csv` so it's important that you learn as much as you can about the dataset before you try and load it. See if you can look at the raw text of the file either locally or using the `!curl` shell command -or in some other way before you try and read it in as a dataframe. This will help you catch what would otherwise be unforseen problems.\n",
        "\n",
        "Feel free to embellish this notebook with additional markdown cells,code cells, comments, graphs, etc. Whatever you think helps adequately address the questions."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "156P6ndeKojO",
        "colab_type": "text"
      },
      "source": [
        "## 1) Load a dataset from UCI (via its URL)\n",
        "\n",
        "Please navigate to the home page and choose a dataset (other than the Adult dataset) from the \"Most Popular\" section on the right-hand side of the home page. Load the dataset via its URL and check the following (show your work):\n",
        "\n",
        "- Are the headers showing up properly?\n",
        "- Look at the first 5 and the last 5 rows, do they seem to be in order?\n",
        "- Does the dataset have the correct number of rows and columns as described in the UCI page? \n",
        " - Remember, that UCI does not count the y variable (column of values that we might want to predict via a machine learning model) as an \"attribute\" but rather as a \"class attribute\" so you may end up seeing a number of columns that is one greater than the number listed on the UCI website.\n",
        "- Does UCI list this dataset as having missing values? Check for missing values and see if your analysis corroborates what UCI reports?\n",
        "- if `NaN` values or other missing value indicators are not being detected by `df.isnull().sum()` find a way to replace whatever is indicating the missing values with `np.NaN`.\n",
        "- Use the .describe() function in order to see the summary statistics of both the numeric and non-numeric columns. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NJdISe69ZT7E",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# TODO your work here!\n",
        "# And note you should write comments, descriptions, and add new\n",
        "# code and text blocks as needed"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PgdoKB-IupOM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "forest_fires_url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/forest-fires/forestfires.csv'\n",
        "\n",
        "!curl https://archive.ics.uci.edu/ml/machine-learning-databases/forest-fires/forestfires.csv"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0oWy5oEg0MCX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Look at the first 5 and the last 5 rows, do they seem to be in order?"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J0Inx_ncAubw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#The headers showing up properly"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "75_Y_e7Uz6iG",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "9984af70-d27d-45fc-a802-17035aea4139"
      },
      "source": [
        "import pandas as pd \n",
        "\n",
        "df = pd.read_csv(forest_fires_url)\n",
        "df.head() # the first 5 seem in order"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>FFMC</th>\n",
              "      <th>DMC</th>\n",
              "      <th>DC</th>\n",
              "      <th>ISI</th>\n",
              "      <th>temp</th>\n",
              "      <th>RH</th>\n",
              "      <th>wind</th>\n",
              "      <th>rain</th>\n",
              "      <th>area</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7</td>\n",
              "      <td>5</td>\n",
              "      <td>mar</td>\n",
              "      <td>fri</td>\n",
              "      <td>86.2</td>\n",
              "      <td>26.2</td>\n",
              "      <td>94.3</td>\n",
              "      <td>5.1</td>\n",
              "      <td>8.2</td>\n",
              "      <td>51</td>\n",
              "      <td>6.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>oct</td>\n",
              "      <td>tue</td>\n",
              "      <td>90.6</td>\n",
              "      <td>35.4</td>\n",
              "      <td>669.1</td>\n",
              "      <td>6.7</td>\n",
              "      <td>18.0</td>\n",
              "      <td>33</td>\n",
              "      <td>0.9</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>oct</td>\n",
              "      <td>sat</td>\n",
              "      <td>90.6</td>\n",
              "      <td>43.7</td>\n",
              "      <td>686.9</td>\n",
              "      <td>6.7</td>\n",
              "      <td>14.6</td>\n",
              "      <td>33</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>mar</td>\n",
              "      <td>fri</td>\n",
              "      <td>91.7</td>\n",
              "      <td>33.3</td>\n",
              "      <td>77.5</td>\n",
              "      <td>9.0</td>\n",
              "      <td>8.3</td>\n",
              "      <td>97</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>8</td>\n",
              "      <td>6</td>\n",
              "      <td>mar</td>\n",
              "      <td>sun</td>\n",
              "      <td>89.3</td>\n",
              "      <td>51.3</td>\n",
              "      <td>102.2</td>\n",
              "      <td>9.6</td>\n",
              "      <td>11.4</td>\n",
              "      <td>99</td>\n",
              "      <td>1.8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   X  Y month  day  FFMC   DMC     DC  ISI  temp  RH  wind  rain  area\n",
              "0  7  5   mar  fri  86.2  26.2   94.3  5.1   8.2  51   6.7   0.0   0.0\n",
              "1  7  4   oct  tue  90.6  35.4  669.1  6.7  18.0  33   0.9   0.0   0.0\n",
              "2  7  4   oct  sat  90.6  43.7  686.9  6.7  14.6  33   1.3   0.0   0.0\n",
              "3  8  6   mar  fri  91.7  33.3   77.5  9.0   8.3  97   4.0   0.2   0.0\n",
              "4  8  6   mar  sun  89.3  51.3  102.2  9.6  11.4  99   1.8   0.0   0.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ID_G2TD61Wp8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "d9a26114-8904-4ef7-a94b-fcb056e0ee4f"
      },
      "source": [
        "df.tail() # the last 5 also seem in order"
      ],
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "      <th>month</th>\n",
              "      <th>day</th>\n",
              "      <th>FFMC</th>\n",
              "      <th>DMC</th>\n",
              "      <th>DC</th>\n",
              "      <th>ISI</th>\n",
              "      <th>temp</th>\n",
              "      <th>RH</th>\n",
              "      <th>wind</th>\n",
              "      <th>rain</th>\n",
              "      <th>area</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>512</th>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>aug</td>\n",
              "      <td>sun</td>\n",
              "      <td>81.6</td>\n",
              "      <td>56.7</td>\n",
              "      <td>665.6</td>\n",
              "      <td>1.9</td>\n",
              "      <td>27.8</td>\n",
              "      <td>32</td>\n",
              "      <td>2.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>513</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>aug</td>\n",
              "      <td>sun</td>\n",
              "      <td>81.6</td>\n",
              "      <td>56.7</td>\n",
              "      <td>665.6</td>\n",
              "      <td>1.9</td>\n",
              "      <td>21.9</td>\n",
              "      <td>71</td>\n",
              "      <td>5.8</td>\n",
              "      <td>0.0</td>\n",
              "      <td>54.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>514</th>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>aug</td>\n",
              "      <td>sun</td>\n",
              "      <td>81.6</td>\n",
              "      <td>56.7</td>\n",
              "      <td>665.6</td>\n",
              "      <td>1.9</td>\n",
              "      <td>21.2</td>\n",
              "      <td>70</td>\n",
              "      <td>6.7</td>\n",
              "      <td>0.0</td>\n",
              "      <td>11.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>515</th>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>aug</td>\n",
              "      <td>sat</td>\n",
              "      <td>94.4</td>\n",
              "      <td>146.0</td>\n",
              "      <td>614.7</td>\n",
              "      <td>11.3</td>\n",
              "      <td>25.6</td>\n",
              "      <td>42</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>516</th>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>nov</td>\n",
              "      <td>tue</td>\n",
              "      <td>79.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>106.7</td>\n",
              "      <td>1.1</td>\n",
              "      <td>11.8</td>\n",
              "      <td>31</td>\n",
              "      <td>4.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     X  Y month  day  FFMC    DMC     DC   ISI  temp  RH  wind  rain   area\n",
              "512  4  3   aug  sun  81.6   56.7  665.6   1.9  27.8  32   2.7   0.0   6.44\n",
              "513  2  4   aug  sun  81.6   56.7  665.6   1.9  21.9  71   5.8   0.0  54.29\n",
              "514  7  4   aug  sun  81.6   56.7  665.6   1.9  21.2  70   6.7   0.0  11.16\n",
              "515  1  4   aug  sat  94.4  146.0  614.7  11.3  25.6  42   4.0   0.0   0.00\n",
              "516  6  3   nov  tue  79.5    3.0  106.7   1.1  11.8  31   4.5   0.0   0.00"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1m5NYXhR3DTv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Does the dataset have the correct number of rows and columns as described in the UCI page?"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HtMB0rFK3FFQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "eeb904dc-6028-4860-d2a2-c3d58a12200c"
      },
      "source": [
        "print(df.shape) #yes it has the correct number of rows and columns."
      ],
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(517, 13)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WxUHOnxy7S_V",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Does UCI list this dataset as having missing values? Check for missing values and see if your analysis corroborates what UCI reports?"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mp8mBQCc_HT6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "650481cb-3f30-4e21-98f6-b7ced2f774cd"
      },
      "source": [
        "df.isnull().sum()# The UCI says that there are no missing values and it seems that way."
      ],
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "X        0\n",
              "Y        0\n",
              "month    0\n",
              "day      0\n",
              "FFMC     0\n",
              "DMC      0\n",
              "DC       0\n",
              "ISI      0\n",
              "temp     0\n",
              "RH       0\n",
              "wind     0\n",
              "rain     0\n",
              "area     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bxvyb4Gw_10q",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "0ded1c2e-4fe9-4333-c6e8-0835c1c9898b"
      },
      "source": [
        "#Use the .describe() function in order to see the summary statistics of both the numeric and non-numeric columns\n",
        "df.describe()"
      ],
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "      <th>FFMC</th>\n",
              "      <th>DMC</th>\n",
              "      <th>DC</th>\n",
              "      <th>ISI</th>\n",
              "      <th>temp</th>\n",
              "      <th>RH</th>\n",
              "      <th>wind</th>\n",
              "      <th>rain</th>\n",
              "      <th>area</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>517.000000</td>\n",
              "      <td>517.000000</td>\n",
              "      <td>517.000000</td>\n",
              "      <td>517.000000</td>\n",
              "      <td>517.000000</td>\n",
              "      <td>517.000000</td>\n",
              "      <td>517.000000</td>\n",
              "      <td>517.000000</td>\n",
              "      <td>517.000000</td>\n",
              "      <td>517.000000</td>\n",
              "      <td>517.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>4.669246</td>\n",
              "      <td>4.299807</td>\n",
              "      <td>90.644681</td>\n",
              "      <td>110.872340</td>\n",
              "      <td>547.940039</td>\n",
              "      <td>9.021663</td>\n",
              "      <td>18.889168</td>\n",
              "      <td>44.288201</td>\n",
              "      <td>4.017602</td>\n",
              "      <td>0.021663</td>\n",
              "      <td>12.847292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.313778</td>\n",
              "      <td>1.229900</td>\n",
              "      <td>5.520111</td>\n",
              "      <td>64.046482</td>\n",
              "      <td>248.066192</td>\n",
              "      <td>4.559477</td>\n",
              "      <td>5.806625</td>\n",
              "      <td>16.317469</td>\n",
              "      <td>1.791653</td>\n",
              "      <td>0.295959</td>\n",
              "      <td>63.655818</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>18.700000</td>\n",
              "      <td>1.100000</td>\n",
              "      <td>7.900000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.200000</td>\n",
              "      <td>15.000000</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>90.200000</td>\n",
              "      <td>68.600000</td>\n",
              "      <td>437.700000</td>\n",
              "      <td>6.500000</td>\n",
              "      <td>15.500000</td>\n",
              "      <td>33.000000</td>\n",
              "      <td>2.700000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>91.600000</td>\n",
              "      <td>108.300000</td>\n",
              "      <td>664.200000</td>\n",
              "      <td>8.400000</td>\n",
              "      <td>19.300000</td>\n",
              "      <td>42.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.520000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>92.900000</td>\n",
              "      <td>142.400000</td>\n",
              "      <td>713.900000</td>\n",
              "      <td>10.800000</td>\n",
              "      <td>22.800000</td>\n",
              "      <td>53.000000</td>\n",
              "      <td>4.900000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>6.570000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>96.200000</td>\n",
              "      <td>291.300000</td>\n",
              "      <td>860.600000</td>\n",
              "      <td>56.100000</td>\n",
              "      <td>33.300000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>9.400000</td>\n",
              "      <td>6.400000</td>\n",
              "      <td>1090.840000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                X           Y        FFMC  ...        wind        rain         area\n",
              "count  517.000000  517.000000  517.000000  ...  517.000000  517.000000   517.000000\n",
              "mean     4.669246    4.299807   90.644681  ...    4.017602    0.021663    12.847292\n",
              "std      2.313778    1.229900    5.520111  ...    1.791653    0.295959    63.655818\n",
              "min      1.000000    2.000000   18.700000  ...    0.400000    0.000000     0.000000\n",
              "25%      3.000000    4.000000   90.200000  ...    2.700000    0.000000     0.000000\n",
              "50%      4.000000    4.000000   91.600000  ...    4.000000    0.000000     0.520000\n",
              "75%      7.000000    5.000000   92.900000  ...    4.900000    0.000000     6.570000\n",
              "max      9.000000    9.000000   96.200000  ...    9.400000    6.400000  1090.840000\n",
              "\n",
              "[8 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SHWP_4LMV_mK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "outputId": "93aa2a93-4b0c-4210-e9ab-0fbb7ac83987"
      },
      "source": [
        "df.dtypes"
      ],
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "X          int64\n",
              "Y          int64\n",
              "month     object\n",
              "day       object\n",
              "FFMC     float64\n",
              "DMC      float64\n",
              "DC       float64\n",
              "ISI      float64\n",
              "temp     float64\n",
              "RH         int64\n",
              "wind     float64\n",
              "rain     float64\n",
              "area     float64\n",
              "dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-gFnZR6iLLPY",
        "colab_type": "text"
      },
      "source": [
        "## 2) Load a dataset from your local machine.\n",
        "Choose a second dataset from the \"Popular Datasets\" listing on UCI, but this time download it to your local machine instead of reading it in via the URL. Upload the file to Google Colab using the files tab in the left-hand sidebar or by importing `files` from `google.colab` The following link will be a useful resource if you can't remember the syntax: <https://towardsdatascience.com/3-ways-to-load-csv-files-into-colab-7c14fcbdcb92>\n",
        "\n",
        "- Answer all of the same bullet point questions from part 1 again on this new dataset. \n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qUmwX-ZoM9cq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# TODO your work here!\n",
        "# And note you should write comments, descriptions, and add new\n",
        "# code and text blocks as needed"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "inNcHE8iFPQ7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KGndx7CWFQNf",
        "colab_type": "code",
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 71
        },
        "outputId": "861c6cb0-e7b4-4cff-c7d3-3d66629249b0"
      },
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f3681d71-53fc-4b5c-af07-2acd5445b7a4\" name=\"files[]\" multiple disabled />\n",
              "     <output id=\"result-f3681d71-53fc-4b5c-af07-2acd5445b7a4\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving car.data to car (1).data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5aVS_9U-GW9V",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Look at the first 5 and the last 5 rows, do they seem to be in order?"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fe5ClHn5HZlb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#The headers is showing up properly"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SAvE6BNEFegR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "587b451c-b0f8-4e55-edf5-8eb4c27757ba"
      },
      "source": [
        "df = pd.read_csv('car.data')\n",
        "\n",
        "df.head() #the first 5 rows seem fine "
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vhigh</th>\n",
              "      <th>vhigh.1</th>\n",
              "      <th>2</th>\n",
              "      <th>2.1</th>\n",
              "      <th>small</th>\n",
              "      <th>low</th>\n",
              "      <th>unacc</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>vhigh</td>\n",
              "      <td>vhigh</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>small</td>\n",
              "      <td>med</td>\n",
              "      <td>unacc</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>vhigh</td>\n",
              "      <td>vhigh</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>small</td>\n",
              "      <td>high</td>\n",
              "      <td>unacc</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>vhigh</td>\n",
              "      <td>vhigh</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>med</td>\n",
              "      <td>low</td>\n",
              "      <td>unacc</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>vhigh</td>\n",
              "      <td>vhigh</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>med</td>\n",
              "      <td>med</td>\n",
              "      <td>unacc</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>vhigh</td>\n",
              "      <td>vhigh</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>med</td>\n",
              "      <td>high</td>\n",
              "      <td>unacc</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   vhigh vhigh.1  2 2.1  small   low  unacc\n",
              "0  vhigh   vhigh  2   2  small   med  unacc\n",
              "1  vhigh   vhigh  2   2  small  high  unacc\n",
              "2  vhigh   vhigh  2   2    med   low  unacc\n",
              "3  vhigh   vhigh  2   2    med   med  unacc\n",
              "4  vhigh   vhigh  2   2    med  high  unacc"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8UaFWpJLGSW0",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "9fddacb4-3e36-4cf3-abd3-cebf97a5ee12"
      },
      "source": [
        "df.tail() #the last 5 rows also look fine"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vhigh</th>\n",
              "      <th>vhigh.1</th>\n",
              "      <th>2</th>\n",
              "      <th>2.1</th>\n",
              "      <th>small</th>\n",
              "      <th>low</th>\n",
              "      <th>unacc</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1722</th>\n",
              "      <td>low</td>\n",
              "      <td>low</td>\n",
              "      <td>5more</td>\n",
              "      <td>more</td>\n",
              "      <td>med</td>\n",
              "      <td>med</td>\n",
              "      <td>good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1723</th>\n",
              "      <td>low</td>\n",
              "      <td>low</td>\n",
              "      <td>5more</td>\n",
              "      <td>more</td>\n",
              "      <td>med</td>\n",
              "      <td>high</td>\n",
              "      <td>vgood</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1724</th>\n",
              "      <td>low</td>\n",
              "      <td>low</td>\n",
              "      <td>5more</td>\n",
              "      <td>more</td>\n",
              "      <td>big</td>\n",
              "      <td>low</td>\n",
              "      <td>unacc</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1725</th>\n",
              "      <td>low</td>\n",
              "      <td>low</td>\n",
              "      <td>5more</td>\n",
              "      <td>more</td>\n",
              "      <td>big</td>\n",
              "      <td>med</td>\n",
              "      <td>good</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1726</th>\n",
              "      <td>low</td>\n",
              "      <td>low</td>\n",
              "      <td>5more</td>\n",
              "      <td>more</td>\n",
              "      <td>big</td>\n",
              "      <td>high</td>\n",
              "      <td>vgood</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     vhigh vhigh.1      2   2.1 small   low  unacc\n",
              "1722   low     low  5more  more   med   med   good\n",
              "1723   low     low  5more  more   med  high  vgood\n",
              "1724   low     low  5more  more   big   low  unacc\n",
              "1725   low     low  5more  more   big   med   good\n",
              "1726   low     low  5more  more   big  high  vgood"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QE0j_ET7H2I2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Does the dataset have the correct number of rows and columns as described in the UCI page?"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1iBWGikFH3N_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "4a6d7e3f-9281-4ae5-a326-464bd2f1adb8"
      },
      "source": [
        "print(df.shape) # Yes the dataset have the correct number"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(1727, 7)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X1lyCJxuIxF7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Does UCI list this dataset as having missing values? Check for missing values and see if your analysis corroborates what UCI reports?"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "deT5f-vpI2I5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "outputId": "c6a1bcb6-867d-45be-ee72-fe741b125a00"
      },
      "source": [
        "df.isnull().sum()# The UCI says that there are no missing values and it seems that way."
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "vhigh      0\n",
              "vhigh.1    0\n",
              "2          0\n",
              "2.1        0\n",
              "small      0\n",
              "low        0\n",
              "unacc      0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VknSjbdWI7cn",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "outputId": "836b983d-6cf3-4a92-dcf3-18ceb1361438"
      },
      "source": [
        "#Use the .describe() function in order to see the summary statistics of both the numeric and non-numeric columns\n",
        "df.describe()"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vhigh</th>\n",
              "      <th>vhigh.1</th>\n",
              "      <th>2</th>\n",
              "      <th>2.1</th>\n",
              "      <th>small</th>\n",
              "      <th>low</th>\n",
              "      <th>unacc</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1727</td>\n",
              "      <td>1727</td>\n",
              "      <td>1727</td>\n",
              "      <td>1727</td>\n",
              "      <td>1727</td>\n",
              "      <td>1727</td>\n",
              "      <td>1727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>high</td>\n",
              "      <td>high</td>\n",
              "      <td>5more</td>\n",
              "      <td>more</td>\n",
              "      <td>big</td>\n",
              "      <td>high</td>\n",
              "      <td>unacc</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>432</td>\n",
              "      <td>432</td>\n",
              "      <td>432</td>\n",
              "      <td>576</td>\n",
              "      <td>576</td>\n",
              "      <td>576</td>\n",
              "      <td>1209</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       vhigh vhigh.1      2   2.1 small   low  unacc\n",
              "count   1727    1727   1727  1727  1727  1727   1727\n",
              "unique     4       4      4     3     3     3      4\n",
              "top     high    high  5more  more   big  high  unacc\n",
              "freq     432     432    432   576   576   576   1209"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mq_aQjxlM-u5",
        "colab_type": "text"
      },
      "source": [
        "## 3) Make Crosstabs of the Categorical Variables\n",
        "\n",
        "Take whichever of the above datasets has more categorical variables and use crosstabs to tabulate the different instances of the categorical variables.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9-n9-LTM-18p",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "outputId": "cc6fadf3-5e2c-466b-c6a0-ce4e9340903e"
      },
      "source": [
        "pd.crosstab(df['X'], df['Y'])"
      ],
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Y</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>10</td>\n",
              "      <td>15</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25</td>\n",
              "      <td>1</td>\n",
              "      <td>27</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>43</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>22</td>\n",
              "      <td>36</td>\n",
              "      <td>25</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0</td>\n",
              "      <td>25</td>\n",
              "      <td>9</td>\n",
              "      <td>49</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>45</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>52</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Y   2   3   4   5   6  8  9\n",
              "X                          \n",
              "1  19  10  15   4   0  0  0\n",
              "2  25   1  27  20   0  0  0\n",
              "3   0   1  43   7   4  0  0\n",
              "4   0  22  36  25   8  0  0\n",
              "5   0   0  23   3   4  0  0\n",
              "6   0  25   9  49   3  0  0\n",
              "7   0   2  45  11   2  0  0\n",
              "8   0   3   1   4  52  1  0\n",
              "9   0   0   4   2   1  0  6"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OJ4t2IAk-6Vg",
        "colab_type": "text"
      },
      "source": [
        "## 4) Explore the distributions of the variables of the dataset using:\n",
        "- Histograms\n",
        "- Scatterplots\n",
        "- Density Plots"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fmm-Vx2eT7aT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nQCCD_ClMyFl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Histograms"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j2kQfWlEMnvK",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "7476dbe1-aff6-4a07-dc7a-c576bf01b087"
      },
      "source": [
        "df['X'].hist(bins=72);"
      ],
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXAAAAD4CAYAAAD1jb0+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAO/UlEQVR4nO3df6xfdX3H8edLKsH2KkVwDStsJdGQ\nEcjU3jAdG7kVXVCIkIUYDDNgWLol6qpumdV/zP5YhsnQGbIsaaizyypXLJgaUYfRds4/7GaRpUB1\ndliRDlsNWL2MBHHv/XFPf3Dbcr/fe7+X8/3A85Hc3O8595xzXzn53tf3fD/fc85NVSFJas9L+g4g\nSVoYC1ySGmWBS1KjLHBJapQFLkmNWvZ8/rJzzjmn1qxZs6B1n3zySVasWDHaQCNgruGYazjmGs4L\nNdfu3bt/WlWvOuEHVfW8fa1du7YWaseOHQtedymZazjmGo65hvNCzQV8u07SqQ6hSFKjLHBJapQF\nLkmNssAlqVEWuCQ1ygKXpEZZ4JLUKAtckhplgUtSo57XS+mlPQcOc9PGe45O77/lqh7TSG3zCFyS\nGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1ygKXpEZZ4JLUKAtckhplgUtSo7yUXhpj3npAz8UjcElq\nlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNGqjAk3wgyYNJHkhyR5Iz\nklyQZFeSfUk+m+T0pQ4rSTpm3gJPshr4M2Cyqi4GTgOuBz4GfKKqXg08Ady8lEElSc826BDKMuBl\nSZYBy4HHgDcB27qfbwGuHX08SdKppKrmXyjZAPw18BRwL7AB+FZ39E2S84Evd0foc9ddD6wHWLVq\n1drp6ekFBZ2ZmWFiYmJB6y4lcw3n0OOHOfjUselLVp/ZX5jjuL+GM67764Waa926dburanLu/Hlv\nJ5vkLOAa4ALgZ8DngCsH/cVVtQnYBDA5OVlTU1ODrvosO3fuZKHrLiVzDee2rdu5dc+xp93+G6b6\nC3Mc99dwxnV/vdhyDTKE8mbgB1X1k6r6JXA3cBmwshtSATgPODDydJKkUxqkwB8B3pBkeZIAVwAP\nATuA67plbgS2L01ESdLJzFvgVbWL2Q8r7wP2dOtsAj4EfDDJPuBsYPMS5pQkzTHQv1Srqo8CH50z\n+2Hg0pEnkiQNxCsxJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpURa4JDVq\noEvpdWp7Dhzmpo33HJ3ef8tVPaaR9GLiEbgkNcoCl6RGWeCS1CgLXJIaZYFLUqMscElqlAUuSY2y\nwCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1ygKXpEZZ4JLUKAtc\nkhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNWqgAk+yMsm2JN9NsjfJG5O8MslXk3y/+37WUoeVJB2z\nbMDlPgl8paquS3I6sBz4CPC1qrolyUZgI/ChJcopSfPac+AwN22851nz9t9yVU9plt68R+BJzgQu\nBzYDVNXTVfUz4BpgS7fYFuDapQopSTpRquq5F0heC2wCHgJ+G9gNbAAOVNXKbpkATxyZnrP+emA9\nwKpVq9ZOT08vKOjMzAwTExMLWncpHXr8MAefOjZ9yeoz+wtzHPfXcNxfw5mbC8Yj27jmWuzza926\ndburanLu/EGGUJYBrwfeV1W7knyS2eGSo6qqkpz0laCqNjH7AsDk5GRNTU0Nmx2AnTt3stB1l9Jt\nW7dz655ju3H/DVP9hTmO+2s47q/hzM0F45FtXHMt1fNrkA8xHwUerapd3fQ2Zgv9YJJzAbrvh0ae\nTpJ0SvMWeFX9GPhRkgu7WVcwO5zyBeDGbt6NwPYlSShJOqlBz0J5H7C1OwPlYeDdzJb/nUluBn4I\nvGNpIkqSTmagAq+q+4ETBtCZPRqXJPXAKzElqVEWuCQ1ygKXpEZZ4JLUKAtckhplgUtSowY9D1yN\nmXtXthfyHdmkFyuPwCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1\nygKXpEZZ4JLUKAtckhplgUtSoyxwSWpUM/cD9/7WkvRsHoFLUqMscElqlAUuSY2ywCWpURa4JDXK\nApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVEWuCQ1ygKXpEYNXOBJTkvynSRf7KYvSLIr\nyb4kn01y+tLFlCTNNcwR+AZg73HTHwM+UVWvBp4Abh5lMEnScxuowJOcB1wF3N5NB3gTsK1bZAtw\n7VIElCSdXKpq/oWSbcDfAC8H/gK4CfhWd/RNkvOBL1fVxSdZdz2wHmDVqlVrp6enFxT00OOHOfjU\nselLVp+5oO2MmrmGM665ZmZmmJiY6DvGCcZ1f83NBeORbVxzLfb5tW7dut1VNTl3/rz/Ui3J1cCh\nqtqdZGrYX1xVm4BNAJOTkzU1NfQmALht63Zu3XMs7v4bFradUTPXcMY1186dO1noc3Mpjev+mpsL\nxiPbuOZaqufXIP8T8zLg7UneBpwBvAL4JLAyybKqegY4Dzgw8nSSpFOadwy8qj5cVedV1RrgeuDr\nVXUDsAO4rlvsRmD7kqWUJJ1gMeeBfwj4YJJ9wNnA5tFEkiQNYpAhlKOqaiews3v8MHDp6CNJkgbh\nlZiS1CgLXJIaZYFLUqMscElqlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQF\nLkmNssAlqVEWuCQ1ygKXpEZZ4JLUqKH+I4/0QrXnwGFu2njP0en9t1zVYxppMB6BS1KjLHBJapQF\nLkmNssAlqVEWuCQ1ygKXpEZZ4JLUKAtckhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RGWeCS\n1CgLXJIaZYFLUqMscElq1LwFnuT8JDuSPJTkwSQbuvmvTPLVJN/vvp+19HElSUcMcgT+DPDnVXUR\n8AbgPUkuAjYCX6uq1wBf66YlSc+TeQu8qh6rqvu6x78A9gKrgWuALd1iW4BrlyqkJOlEqarBF07W\nAN8ALgYeqaqV3fwATxyZnrPOemA9wKpVq9ZOT08vKOihxw9z8Klj05esPnNB2xk1cw3HXMNpJReM\nR7ZxzTUzM8PExMSC11+3bt3uqpqcO3/ZoBtIMgHcBby/qn4+29mzqqqSnPSVoKo2AZsAJicna2pq\nasjos27bup1b9xyLu/+GhW1n1Mw1HHMNp5VcMB7ZxjXXzp07WWj3PZeBzkJJ8lJmy3trVd3dzT6Y\n5Nzu5+cCh0aeTpJ0SoOchRJgM7C3qj5+3I++ANzYPb4R2D76eJKkUxlkCOUy4F3AniT3d/M+AtwC\n3JnkZuCHwDuWJqIk6WTmLfCq+iaQU/z4itHGkSQNyisxJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFL\nUqMscElqlAUuSY2ywCWpURa4JDVq4NvJSpIGs2bjPc+a/vSVK5bk93gELkmNssAlqVEWuCQ1ygKX\npEZZ4JLUKAtckhplgUtSoyxwSWqUBS5JjbLAJalRFrgkNcoCl6RGWeCS1CgLXJIaZYFLUqMscElq\nlAUuSY2ywCWpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJapQFLkmNssAlqVGLKvAkVyb5XpJ9\nSTaOKpQkaX4LLvAkpwF/D7wVuAh4Z5KLRhVMkvTcFnMEfimwr6oerqqngWngmtHEkiTNJ1W1sBWT\n64Arq+qPu+l3Ab9TVe+ds9x6YH03eSHwvQVmPQf46QLXXUrmGo65hmOu4bxQc/1mVb1q7sxli9jg\nQKpqE7BpsdtJ8u2qmhxBpJEy13DMNRxzDefFlmsxQygHgPOPmz6vmydJeh4spsD/A3hNkguSnA5c\nD3xhNLEkSfNZ8BBKVT2T5L3AvwCnAZ+qqgdHluxEix6GWSLmGo65hmOu4byoci34Q0xJUr+8ElOS\nGmWBS1Kjxr7Ak3wqyaEkD/Sd5XhJzk+yI8lDSR5MsqHvTABJzkjy70n+s8v1V31nOiLJaUm+k+SL\nfWc5XpL9SfYkuT/Jt/vOc0SSlUm2Jflukr1J3jgGmS7s9tORr58neX/fuQCSfKB7zj+Q5I4kZ/Sd\nCSDJhi7Tg6PeV2M/Bp7kcmAG+KequrjvPEckORc4t6ruS/JyYDdwbVU91HOuACuqaibJS4FvAhuq\n6lt95gJI8kFgEnhFVV3dd54jkuwHJqtqrC4ASbIF+Lequr0702t5Vf2s71xHdLfTOMDsBXw/7DnL\namaf6xdV1VNJ7gS+VFWf7jnXxcxepX4p8DTwFeBPq2rfKLY/9kfgVfUN4PG+c8xVVY9V1X3d418A\ne4HV/aaCmjXTTb60++r9VTrJecBVwO19Z2lBkjOBy4HNAFX19DiVd+cK4L/7Lu/jLANelmQZsBz4\nn57zAPwWsKuq/reqngH+FfjDUW187Au8BUnWAK8DdvWbZFY3VHE/cAj4alWNQ66/A/4S+L++g5xE\nAfcm2d3d+mEcXAD8BPjHbtjp9iQr+g41x/XAHX2HAKiqA8DfAo8AjwGHq+reflMB8ADw+0nOTrIc\neBvPvgByUSzwRUoyAdwFvL+qft53HoCq+lVVvZbZq2Mv7d7G9SbJ1cChqtrdZ47n8HtV9Xpm76z5\nnm7Yrm/LgNcD/1BVrwOeBMbmls3dkM7bgc/1nQUgyVnM3kzvAuDXgRVJ/qjfVFBVe4GPAfcyO3xy\nP/CrUW3fAl+Eboz5LmBrVd3dd565urfcO4Are45yGfD2bqx5GnhTkn/uN9Ix3dEbVXUI+Dyz45V9\nexR49Lh3T9uYLfRx8Vbgvqo62HeQzpuBH1TVT6rql8DdwO/2nAmAqtpcVWur6nLgCeC/RrVtC3yB\nug8LNwN7q+rjfec5IsmrkqzsHr8MeAvw3T4zVdWHq+q8qlrD7Nvur1dV70dHAElWdB9C0w1R/AGz\nb3t7VVU/Bn6U5MJu1hVArx+Qz/FOxmT4pPMI8IYky7u/zSuY/Vyqd0l+rfv+G8yOf39mVNte8rsR\nLlaSO4Ap4JwkjwIfrarN/aYCZo8q3wXs6cabAT5SVV/qMRPAucCW7gyBlwB3VtVYnbY3ZlYBn5/9\nm2cZ8Jmq+kq/kY56H7C1G654GHh3z3mAoy90bwH+pO8sR1TVriTbgPuAZ4DvMD6X1d+V5Gzgl8B7\nRvlh9NifRihJOjmHUCSpURa4JDXKApekRlngktQoC1ySGmWBS1KjLHBJatT/A+bKG5AP1X+FAAAA\nAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qBV5Og2eMsmr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "280517b1-7bda-4726-a272-a57b83daea9f"
      },
      "source": [
        "df['Y'].hist(bins=72);"
      ],
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nuBDjqgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LSQs2neLM5O0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Scatterplots"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xzC_OERrND7a",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "5ba74af3-0656-4591-fde2-b8ffb2e1dd86"
      },
      "source": [
        "df.plot.scatter('X', 'Y');"
      ],
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ohZUYSrpOMo5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#Density Plots"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ehwFDCDsOPxJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "f891e896-7dae-4212-ae8c-1bc36cf51d12"
      },
      "source": [
        "df['X'].plot.density();"
      ],
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LXXTzpgp_N0q",
        "colab_type": "text"
      },
      "source": [
        "## 5) Create at least one visualization from a crosstab:\n",
        "\n",
        "Remember that a crosstab is just a dataframe and can be manipulated in the same way by row index, column, index, or column/row/cell position.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kBQKXHUa_VxM",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "outputId": "078a84a5-484f-4e49-b2d5-865f0b0dc8c6"
      },
      "source": [
        "table = pd.crosstab(df['X'], df['Y'])\n",
        "\n",
        "table"
      ],
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>Y</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>X</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>10</td>\n",
              "      <td>15</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>25</td>\n",
              "      <td>1</td>\n",
              "      <td>27</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>43</td>\n",
              "      <td>7</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>22</td>\n",
              "      <td>36</td>\n",
              "      <td>25</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0</td>\n",
              "      <td>25</td>\n",
              "      <td>9</td>\n",
              "      <td>49</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>45</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>52</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Y   2   3   4   5   6  8  9\n",
              "X                          \n",
              "1  19  10  15   4   0  0  0\n",
              "2  25   1  27  20   0  0  0\n",
              "3   0   1  43   7   4  0  0\n",
              "4   0  22  36  25   8  0  0\n",
              "5   0   0  23   3   4  0  0\n",
              "6   0  25   9  49   3  0  0\n",
              "7   0   2  45  11   2  0  0\n",
              "8   0   3   1   4  52  1  0\n",
              "9   0   0   4   2   1  0  6"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 128
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8QP3yu4RQKXT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "13339dbb-6a9a-4db8-def7-0f02723a0e62"
      },
      "source": [
        "table.plot();"
      ],
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n2LGD3bt3M3/+fKc/95xx6Mcqjfzjyx1c/ta7HBIr6ebbn9Tb3uH6hFjULQxtbQ4hBHdPjCOnrJbU\n/SUusPjcQVqtFD3xJOrg4BY18rBZM21R+rvvdaJ1LaNVaXkh6QUi/SN5IPUByoztLyozZGSi0uvR\nXeCk3O3N/wIEjLn37HNd42DwnyDjXVuOugOkFqTSL6Qf0V2iHbpe07UrvkMGU+OGdrpFuZUgIDI2\n0NbXJSrBqTq6q9H4qBCi+QIjV+H1Dr2qzsTzP+0j+YVUvtu7mS69PqZ3UCxfXf02wX761hdogUsH\ndSMyUMe76XnOMfYc5cTXX2PMyiLiH/9osRmVPUo//sknHhOlg62R17LJy6iqr2Ju2lzM1vbtmxgy\nM/EbOQKhdkIRTH01bPsIBlwJQc044IkP2nLTN73R6nKV9ZVsK95GcnRym8zQJyZSl70T83HHPjSc\nRVFOFV27BZxM+0uI9C4dXQiBxqflkXSuwGsder3ZwrvpuSQ9n8LrqYdIGghh/T4iwr8rb/1hpVP6\ns/hoVNw2Lpb0g2XsK+rcbn3egrmigtIXX8I/IYGgq648/WRdJWR/AadsqoXNmon0sCgdbJkvC8ct\nZGvRVpZmLm3z/ebjx2k4dAh/Z5X7Z30K9ZW2VMXmiLgQLvwjbPkX1LX87zOtIA2LtJzVjKs19EnJ\nICW169a16b6OIKWkOLfytIHQXqmj+6gxdXLnRa9z6Far5LsdR7no5bU8+f0eBnYP4oN7LiBP+woa\nlYqVl6wkwt95Jde3jOmJr1bFu+m5TlvzXKLkxRex1NYS9fjCs/cofn0C/u8e2Pf7qC1PjdIBpveZ\nzk0X3sQHez7gp7yf2nSvU/Vzq8UWdUePgpimqzlPMukh2wdnxjstXpaan0q4XzgDwwa2yRTfAfGo\nw8I6tfviiWID9QbzaSPnvFJH16lBSswNnZcl5FUOfcOhMq5csZ6/f7YdvU7Lh3eNZsWfL+SVnf+g\nqqGKNy56g16BTsr/bSTY34drR0TzTdZRymrqnbq2t2PYto3Kr/+P0DtuR9ev3+knj+faytXB1oPE\nC6J0gH8k/IPhEcNZuH4hBysOOnyfMSMT4eODrzPS0Pb/DBW5LUfndnqMgD5TbNkwpqaLpBosDaQX\nppMUk9TmfHuhUqGfNIma9euR5s5J4bUXFJ06ocgbdXR7/5nO1NG9wqHvK6rijve2cPNbmymvqefl\n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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "25rJQ1D3QsnN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 276
        },
        "outputId": "b4524fc9-6135-4744-eb71-63b3c510936c"
      },
      "source": [
        "pd.crosstab(df['X'], df['Y']).plot(kind='bar');"
      ],
      "execution_count": 131,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nRK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MZCxTwKuReV9",
        "colab_type": "text"
      },
      "source": [
        "## Stretch Goals \n",
        "\n",
        "The following additional study tasks are optional, they are intended to give you an opportunity to stretch yourself beyond the main requirements of the assignment. You can pick and choose from the below, you do not need to complete them in any particular order.\n",
        "\n",
        "### - Practice Exploring other Datasets\n",
        "\n",
        "### -  Try using the Seaborn plotting library's \"Pairplot\" functionality in order to explore all of the possible histograms and scatterplots of your dataset all at once:\n",
        "\n",
        "[Seaborn Pairplot](https://seaborn.pydata.org/generated/seaborn.pairplot.html)\n",
        "\n",
        "### - Turn some of the continuous variables into categorical variables by binning the values using:\n",
        "- [pd.cut()](https://pandas.pydata.org/pandas-docs/version/0.23.4/generated/pandas.cut.html)\n",
        "- [pd.qcut()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.qcut.html)\n",
        "- <https://stackoverflow.com/questions/30211923/what-is-the-difference-between-pandas-qcut-and-pandas-cut>\n",
        "\n",
        "And then use crosstabs to compare/visualize these binned variables against the other variables.\n",
        "\n",
        "\n",
        "### - Other types and sources of data\n",
        "Not all data comes in a nice single file - for example, image classification involves handling lots of image files. You still will probably want labels for them, so you may have tabular data in addition to the image blobs - and the images may be reduced in resolution and even fit in a regular csv as a bunch of numbers.\n",
        "\n",
        "If you're interested in natural language processing and analyzing text, that is another example where, while it can be put in a csv, you may end up loading much larger raw data and generating features that can then be thought of in a more standard tabular fashion.\n",
        "\n",
        "Overall you will in the course of learning data science deal with loading data in a variety of ways. Another common way to get data is from a database - most modern applications are backed by one or more databases, which you can query to get data to analyze. We'll cover this more in our data engineering unit.\n",
        "\n",
        "How does data get in the database? Most applications generate logs - text files with lots and lots of records of each use of the application. Databases are often populated based on these files, but in some situations you may directly analyze log files. The usual way to do this is with command line (Unix) tools - command lines are intimidating, so don't expect to learn them all at once, but depending on your interests it can be useful to practice.\n",
        "\n",
        "One last major source of data is APIs: https://github.com/toddmotto/public-apis\n",
        "\n",
        "API stands for Application Programming Interface, and while originally meant e.g. the way an application interfaced with the GUI or other aspects of an operating system, now it largely refers to online services that let you query and retrieve data. You can essentially think of most of them as \"somebody else's database\" - you have (usually limited) access.\n",
        "\n",
        "*Stretch goal* - research one of the above extended forms of data/data loading. See if you can get a basic example working in a notebook. Image, text, or (public) APIs are probably more tractable - databases are interesting, but there aren't many publicly accessible and they require a great deal of setup."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f4QP6--JBXNK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}